```json
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Test Supabase-Letta Connection\n",
    "This notebook fetches EMS data from Supabase `transcriptions` table, sends it to Letta's MediBot, and displays SBAR records."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install required packages\n",
    "!pip install python-supabase letta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from supabase import create_client, Client\n",
    "from letta import Letta\n",
    "import json\n",
    "import time\n",
    "\n",
    "# Supabase credentials\n",
    "SUPABASE_URL = 'YOUR_SUPABASE_URL'  # e.g., 'https://xyz.supabase.co'\n",
    "SUPABASE_KEY = 'YOUR_SUPABASE_ANON_KEY'  # From Supabase Settings -> API\n",
    "\n",
    "# Letta credentials\n",
    "LETTA_API_KEY = 'YOUR_LETTA_API_KEY'  # From app.letta.com -> Settings -> API Keys\n",
    "AGENT_ID = 'YOUR_MEDIBOT_AGENT_ID'  # From client.agents.list()[0].id\n",
    "\n",
    "# Initialize clients\n",
    "supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)\n",
    "letta = Letta(token=LETTA_API_KEY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fix Letta crash: Delete unused agents\n",
    "for agent in letta.agents.list():\n",
    "    if agent.name != 'MediBot':\n",
    "        letta.agents.delete(agent_id=agent.id)\n",
    "\n",
    "# Verify only MediBot remains\n",
    "agents = letta.agents.list()\n",
    "print(f'Active agents: {len(agents)}')\n",
    "if len(agents) == 1:\n",
    "    print(f'MediBot ID: {agents[0].id}')\n",
    "else:\n",
    "    raise Exception('Unexpected number of agents')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fetch transcriptions from Supabase\n",
    "response = supabase.table('transcriptions').select('id, created_at, data').order('created_at', desc=True).execute()\n",
    "\n",
    "# Check for errors\n",
    "if not response.data:\n",
    "    raise Exception('No data returned from Supabase')\n",
    "\n",
    "transcriptions = response.data\n",
    "print(f'Fetched {len(transcriptions)} transcriptions')\n",
    "\n",
    "# Display first transcription\n",
    "if transcriptions:\n",
    "    print('Sample transcription:', transcriptions[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Process each transcription with Letta\n",
    "for transcription in transcriptions:\n",
    "    patient_data = transcription['data']\n",
    "    patient_name = patient_data.get('patient_full_name', 'Unknown')\n",
    "    print(f'\\nProcessing: {patient_name}')\n",
    "\n",
    "    start_time = time.time()\n",
    "    try:\n",
    "        response = letta.agents.messages.create(\n",
    "            agent_id=AGENT_ID,\n",
    "            messages=[{'role': 'user', 'content': json.dumps(patient_data)}]\n",
    "        )\n",
    "        sbar = response.messages[-1].content\n",
    "        processing_time = time.time() - start_time\n",
    "\n",
    "        print(f'SBAR:\\n{sbar}')\n",
    "        print(f'Processing time: {processing_time:.2f} seconds')\n",
    "    except Exception as e:\n",
    "        print(f'Error processing {patient_name}: {str(e)}')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
```